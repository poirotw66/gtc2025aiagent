 K Thank you.それではオムニバースとオープンUSDで実現する次世代バーチャルファクトリーの作り方ということで理系より発表させていただきたいと思います。私理系の石川と申します。よろしくお願いいたします。弊社の中で約7年ほど前にデジタルツイーに特化したこの事業部を作りまして、現在責任者として事業の方を推進しております。本日前半のパートは私から説明させていただき、後半のパートは3Dアートディレクターの分の方から技術的な説明をさせていただきたいと思います。まずはじめに弊社の技術的な概要についてのご説明になりますが、現在弊社の取り組みとしてはこのNVIDIAオムニバースを中心とした展開を行っております。一方でリアルタイムシミュレーションツールであるUnreal Engineについても非常に多くの実績がありまして、このUnreal EngineとNVIDIAオムニバースをどのように連携していくか、そういった部分についても非常に多くの取り組み事例がございます。またMetaについてはMetaのプレミアパートナーというパートナーになっておりまして、ここではヘッドマウントディスプレイ等を使ったデジタルツインの試みというところにも取り組んでおります。これら3つのリンケージをもってさらに高い付加値を提供していくというところに取り組んでいる状況です。今回テーマとしてはNVIDIAオムニバースを中心としたお話をさせていただきたいと思います。オムニバースはリバーサルシーンディスクリプションというOpenUSDと通常言われていますが、このフォーマットをベースとした開発プラットフォームになっています。NVIDIAのRTXのディアタイムレートレーシング技術であったり、あるいはGPUを活用した物理シミュレーションフィギクス、こういったところに非常に特徴のあるツールになっています。またオムニバースキットというものがベースにありまして、そのキットに対してエクステンションという形で、自分が想定する新しい機能を追加していくことで、自分独自のオムニバースを構築できると、そういったところが特徴になっています。このオムニバースを使ったバーチャルファクトリーインテグレーションのイメージというところで、こちらに絵を記載しているんですけれども、ここに出ている6つのカテゴリーというのは、オムニバースを使って行いたいというニーズが非常に大きな分野になっています。レイアウト検討、CADデータを用いた設計検討、プロセスシミュレーション、AGVを含めたロボットシミュレーション、工業検査、そしてヒューマンオペレーションといった分野ですね。一方でこれらの施策というのは、基本的にこれまで異なる部署や担当者によって、あるいはここに一例として出ているような異なるツールを使って行われてきたというのが実際であり、それぞれの取り組みがクロスして連携できる、あるいは一つの空間をシェアすると、そういった概念というのはなかなか生まれづらかったという状況がありました。オムニバースは一つの開発のプラットフォームとして、これらの施策というのを共通化できるプラットフォームであり、その中心にあるOpenUSTという企画は、これらのコラボレーションを可能とできるフォーマットになっています。今回はこのOpenUSTがどのようにオムニバースに対して、特にこのバーチャルファクトリー化を助けていくかというところについて、フォーカスを当ててお話をしていきたいと思っています。まずはじめにこのOpenUSTという企画なんですが、総合運用可能な3Dワークフローを構築できるファイルフォーマットであるというふうに言えるかと思います。もともと映像制作会社のPixarが、社内の映像制作の開発のために作った企画になっていまして、映像制作の現場だといろんな関係者がいて、最後の段階でもう少しここを変えたいなというふうなワークフローが所持した場合にも、できる限り容易に修正を行える、こういったことが重要になってきます。ここに対して頼るUSTファイルというデータを作り、それをOpenUSTという形で一般で使えるように企画化したといったところが、このOpenUSTができた経緯になっています。現状ではAOUSTという団体の方で、このOpenUSTの企画の標準化をさらに進めるというところを行っているんですけれども、弊社もこのAOUSTに参加をしていますが、最近この工業系のインターレストグループが立ち上がって、映像系だけの議論だけでなくて、このバーチャルファクトリー等において、どのようにOpenUSTのデータが整理されるべきかというところの議論も始まっていますので、今後そういった産業での利用がより促進されるというふうに感じています。このファイルフォーマットとしての特徴としては、非破壊的な編集は可能であること、異なるソフトでの相互互換性が高いこと、効率的なコラボレーションは可能であること、そしてスケーラビリティが挙げられます。これらの特徴がどのようなUSTの要素によって実現できるかといった点について、これからお話をしていきたいと思います。USTファイルというのを語る上では、このPRIMという概念を捉えておく必要がございます。PRIMはUSTファイルの中で構成される構成要素として、最小の構成単位のことを指しています。このPRIMにはメッシュやライトのように可視、見えるものというものもあれば、シェーダーのように目には見えないといったものをPRIMとして定義されています。このPRIMが集合体となってできているのがUSTデータになってくるわけなんですが、USTデータ自体にもいろいろな種類が実は存在します。種類というのは、例えばライトのUST、カメラのUST、マテリアルのUST、フィジックスのUSTという形で、いわゆる形状のデータだけでなくて、ライトやカメラなどのものも独立したUSTファイルとして定義されるということになります。さらにエンバイラメント、環境のUSTのファイルの中には、ライトとカメラのUSTが包含される、あるいはロボットのUSTの中にはマテリアルとフィジックスが包含されるという形で、階層的な構造を同じUSTファイルが持っているというところに特徴があります。全体としてこの例でも、ファクトリー.USTというファイルの中に全てのデータが存在するといった階層を持っています。ここで新しいPRIMを入れ替えたとします。ライトの中で少し照明の感じを変えたいなとか、マテリアルの中での質感をちょっと変えたいなということで、それを新しいPRIMと交換した場合どうなるかというと、ライトとマテリアルは見ての通り影響はされますが、カメラとフィジックスはUSDデータとしてコンポーネントが異なるため、その変更したことに対して影響は及ばないといった形になります。こういった相互の干渉というところが発生しないという意味で、お互いが破壊されない、非破壊的なワークフロアを組めるということになりますし、このカメラやフィジックスの部分だけを独立させて、別の方が担当して作業するということができるので、そこにコラボレーションであったり、共同の作業がしやすくなるといった要素が、このUSDには非常に多く含まれています。一例として画像でお示ししたいと思うんですが、工場内の環境があったとして、ここにスカイライトのUSDを入れると、こういった見た目になります。そこにレクトライトを入れると室内光になるんですけれども、また見た目が変わってきまして、ライトについても異なる種類のライトは別々のUSDとして追加していきます。そこにラックを入れて、段ボールを入れて、ラックのナンバーやキャラクターを追加するという形で、コンポジションされて一つの空間が出来上がるわけなんですが、今お話ししたようなものを順番に載せていって、最終的に一つの絵が出来る、独立したUSDの集合体になっているという形で、このUSDが構成されています。こういったUSDの特徴が、これまでのワークフローをどのように変えていくかというお話になるんですが、従来のワークフロー、例としては外観検査のためのAIを開発するデータを作るというケースだと、まずモデリングというフェーズがあって、そこからテクスチャーを作って、環境設定としてライティングだったり、ジェンダリングの設定をやっていくと、こういったワークフローが一般的だったかと思います。一方でこのワークフローでは、最終的な段階で、やっぱりもうちょっとモデルを変形させたいなというふうになると、全ての作業を遡っていかなければいけないといった形で、修正作業に非常に大きなコストがかかるということもありますし、まず元々モデリングが終わらないテクスチャーに進めないですとか、前後関係もあるというところで、なかなか効率的な作業を組みづらかったといったところがありました。一方でこれからのOpenUSDを使ったワークフローにおいては、基本的にこのツール同士というものは、シームレスに連携することができるようになってきます。各工程の作業というのは、ツールごとに分かれることにはなると思いますが、それらがお互いに干渉しない非破壊的な状況をもって開発ができる、そういったところが非常に特徴になっており、それによって共同作業というところに非常に適したワークフローが行える、それによって開発サイクルも短縮できる、そういったところがUSDの特徴になってきます。これらを使った中で、先ほど挙げたような、それぞれの施策というものを最終的には統合して、一つのオムニバースのUSDデータが、両方の取り組みに効いてくるというケースが出てくると思います。一例としてここでは、プロセスシミュレーターで設計されたライン設計の中で、一つの検査する装置、公共検査装置が、非常に細かい表面を持ったUSDファイルを読んだというケースを想定して、この中で実際に撮像も行って、その良品不良品判定も含めた、全体的なポゼッションをかけるということが、この一つの空間の中でも実現することが可能になってきます。また、この例では、レイアウトを実際に作っていって、その一部分に、CADから作った詳細のモデルを当てていて、さらにそれを俯瞰で、全体的なレイアウトを見るというケースもあれば、さらに拡大して、実寸材のレベルで、何か設計上に問題がないかとか、工程設計を確認したり、ヒューマンオペレーションに絡めていくと、そういった心にも可能になってくるというふうに思います。いろんな施策において、全てここの一つのオニバースの空間が共通で利用できる、そういったところが、これからのワークフローとして、理想的な形だというふうに我々は思っておりますし、このUSDファイルによって、そういったある意味、オニバースがライブラリとして機能していくというところも、可能になってくるというふうに感じています。ここからさらに細かく、各取り組みについてのUSDファイルの特徴が、どのように効いてくるかという話をしていきたいと思います。まずレイアウト検討というところで、ここにも複数USDファイルがもたらす恩恵というのがございます。まずこの3Dの形状に関するデータのワークフローになるんですけれども、実際の工場をデータ化する場合ですと、測定をして天群やフォトグラメトリーのデータを取得されると思います。一方で、CADのソリッドの形でデータを作るケースもあれば、DCCツールといわれるモデリングのツールで、形状を作ってポリゴンとして扱っていくというケースもあると思います。オニバースにおいては、基本的にこれらのいろんなデータの種類があったとしても、すべてUSDデータとして変換して中で扱われるということが、まず大前提になっています。これが何がメリットがあるかというと、オニバースの中では、USDという明確にルール付けされたデータフォーマットで管理されるので、どこに問題があるかということが特定しやすいということもありますし、すべてのデータが同じ条件付けによって、データとして保持されることによって、そのデータの統合ということが非常にしやすくなっていくと、いったところが特徴として挙げられると思います。一例として、FBXという一般的に使われるデータフォーマットがありますけれども、この例を参考として挙げたいと思います。FBXは同じFBXデータであっても、DCCツールで生成して四角ポリゴンのものが、いろんな変化をかけていく過程で、FBXでもう一回出力すると、なぜか三角メッシュになるといったケースもあるかと思うんですけれども、こういった形で、仮にフォーマットが同じであっても、データの性質が変化してしまうといったことが、よくよく発生してきます。USDデータについては、構造も含めて非常に細かくルールが決まっているので、基本的にUSDデータとして作っているデータは、どのツールに移行しても、同じ再現性が得られるといったところに、非常に大きな魅力があります。弊社の方では、JapanUST Factoryというものを現在開発しています。これは今お話したようなレイアウト検討などにおいて、いろんなアセットが登場するとは思うんですけれども、実は共通のアセットというのも、非常に多く含まれるかと思います。ですので、日本でよく使われている、こういうレイアウト検討や、工場、倉庫にまつわるデータというところを、USDファイルとして生成していって、それらを使って早期に、ファクトリーのシミュレーションをしていこうということで、こういったデータというのも、今順次展開しているような状況になっています。これらを活用いただいている一つの事例として、物流におけるオムニバース活用というものがありまして、これはラピュタロブティクス様の例になるんですけれども、ラピュタ様の方では、ここに出ているAMR、ピッキングロボットの開発ですとか、自動フォークリフトの開発ですとか、そういったものに取り組んでいらっしゃるんですけれども、オムニバースの中で、このロボットたちが、どのように共同し、活動するかというところが、なかなか可視化ができないというところで、これをオムニバース環境の中に、作成することによって、それらのイメージを実際に持てるようにしているというのを、現状の試みとして行っています。続いて設計検討なんですけれども、設計検討においても、USDのデータを使うことによって、得られる恩恵というのはたくさんありますので、これから順番に解説していきたいと思います。設計検討においては、設計したデータというものを、早期にオムニバースから、確認できるようにしたいというニーズは、多くあられるかと思います。この例では、設計された詳細データというものを、オムニバースからストリーミングで、Apple Vision Proで見られるようにしているというものなんですが、これによって、設計データがどの辺に不備があるかというところを、早期に、例えば製造の方の視点を入れていくですとか、そういったコラボレーションが可能になっていきます。また、USDアトリビュースというものもありまして、これはいわゆる属性のデータになってくるんですけれども、このテキストですとか、ベクターですとか、いくつかの情報というものを、属性として、USDファイルの中に保持することが可能になっています。これが何が特に特徴になってくるかというと、特にCADのデータを設計系で扱う場合に、部品の番号などのカスタム情報を入れられたいケースが、あるかと思うんですが、そういったものもUSDファイルの中に、メタデータを含めるということが可能になってきます。この情報を利用して、最終的に部品番号でUSDデータを検索したりですとか、そういったことを組むことも可能になっていますので、非常にこの辺りは、CADデータとの相性の良い状況ではないかなというふうに思っています。続きまして、Physicsですね。これは設計検討していく上で、非常に物理の部分をすぐに確認ができるというメリットを生んでいます。PhysicsはNVIDIAのGPUのパワーを使って、物理シミュレーションをかけていくというものになっているんですけれども、例として下に今3つの円盤が浮かんでいますが、これを再生するとどうなるかというと、オレンジは今空中に静止した状態だったんですが、これはPhysicsと何も付与していない、物理を付与していないので、空中に浮かんだままになっています。真ん中の円盤は、今机に当たって硬い状態で落下したんですが、これは合体のPhysicsを付与したものになっています。青については、今机に当たって変形したと思うんですけれども、これは変形DeformableのPhysicsを付与した状態になっています。ポイントとしては、これら3つのデータというのは、元は全て同じUSDファイルの形状のデータになっていて、そこに物理のUSDをアドオンすることで、異なる結果がリアルタイムに得られているというところになります。また数値的にこの結果に関連するパラメータを操作することができるので、この変形の度合いをもっと変えるとかですが、そういったことがリアルタイムに簡単に行うことができるというところが、このPhysicsの特徴になっています。これには合体のシミュレーションですとか、ソフトボディですとか、そういったものも含まれるんですけれども、ロボットのジョイント、あるいはこのコライダーというものも、このPhysicsとして制御することができます。特にコライダーについては、設計したデータというのをオムニバースに入れて、干渉の確認をしたりですとか、そういったケースも多くあるかなと思いますが、このコライダーについても細かく中で設定することができるので、非常にこういった設計系の確認とは相性が良いかなと思います。事例としては、オムニバースによる軍システム開発というのに現在取り組んでいまして、これはK-PROという国のプロジェクトの方で参画して、今動かしているものになります。これは無人航空機、ドローンの軍飛行、すなわちフォーメーションフライトですね。複数機体を同時に飛行させることによって、撮影能力や搬送力を上げていくという研究になるんですけれども、今状況としては、一番左にある実践テストフィールドを、真ん中のオムニバースの環境で作り変えていって、環境状況を作っていって、これからそれに対して、フォーメーションフライトが可能である機体の選定をしていくんですが、選定開発ですね。開発をする上で、カメラであったりいろんなコンポーネントを選定していくんですけれども、これらを入れ替えしながら、リアルタイムに設計検討していって、どういう組み合わせが最適かというところを検討していくことを、これから行います。こういった用途にも非常に相性が良いのが、オムニバースというところになります。ロボットシミュレーションですね。ロボットについても非常に有効な機能というのが、オムニバースの中には含まれていますので、そちらについてお話をしたいと思います。まずこの今、映像というのは、合成データを生成しているプロセスになるんですけれども、マトラボシムリンクとアイザックシムという、オムニバースの中にあるロボットシミュレーションのツールが、連携している状況になっています。これはロボットのアームの先端についているカメラから、その部品を見ていて、その部品の位置がリアルタイムにランダムに、ランダマイズされていて、その結果をもとに良品不良品のラベルデータも含めた、学習データを生成するということをやっている絵になっています。ここにおいても、この部品の位置を変えていくというランダマイズが、非常にUSDデータとして扱っていると、まず行いやすいということで、こういったものは簡易的に組むことが、すぐにできるようになっています。またリプリケーターというものを使うと、画像のデータだけでなくて、デプス、深度ですとか、セグメントですとか、いろんな情報というのを同時に出力することができるようになってきます。バンディングボックスというものがありまして、これは3Dのものになりますけれども、今これは自分の車両の前方にカメラがついています。それで左側の画像というのは後方のカメラ、右側が右側のカメラになっているんですけれども、それらの映像というのを、1回のシミュレーションの中で同時に取得することが、まず可能になっています。さらにこのバンディングボックスが3Dで動いていますけれども、このデータというのは同時に、このバンディングボックスの座標値も含めて出力ができるので、1回のシミュレーションの中で、この映像プラス、セグメンテーションの情報も複数取ることができるということで、非常に効率的な使い方、このリプリケーターは可能になってくるといったところです。ここまでバーチャルファクトリーに関連した要素として、OpenUSDとオニバースというところでお話をしてきましたが、ここからはさらにOpenUSDの技術的な部分について、深持っていきたいと思いますので、ここからは弊社の文の方にバトンタッチして進めたいと思います。それでは続きはOpenUSDのコンポジションアーク、リファレンスペイロード、バリアンドセット、サブレイヤーの説明及び活用例。最後にはMaterialXについて紹介と活用例を、宮南さんに見せたいと思います。まずはコンポジションアークの簡単に説明させていただきます。USDにおけるコンポジションアークとはどういうもので言いますと、それはOpenUSDを非破壊的な変種を保証する、シーンを構築するための基本的な要素であり、レイヤーの間の関係を定義する仕組みですね。以下のコンポジションアークがUSDの中に存在して、それはサブレイヤー、軽称、バリアンドセット、参照、ペイロードと特殊化になります。イメージとしては、USDというフォーマットは精密の機械であって、このコンポジションアークは、その機械を動かすための部品というイメージですね。じゃあ、この部品たちはどういうルールで組み合わせすると言いますと、それがLibabizという原則があります。Libabizとは、各レイヤースタックの中に、コンポジションアークをどのような順調で構成するを定義する、一貫したルールであります。このUSDという、USDフォーマットという精密の機械で、コンポジションアークという部品でそれを組み合わせて、その部品がそれぞれというルールで構成されているのが、Libabiz原則というもので定義されていますね。今日紹介するサプレイヤー、バリアンドセット、参照はこのような順調に構成されています。上の方が意見が強くて、この意見が強いとはどういうことと言いますと、下の方の図がイメージになります。一番左のベースキューブというものがありまして、それが最初のUSD、仮にこれが最初のUSDであって、その最初のUSDが他のリファレンスペイロー等に参照されて、参照された先に、それをバリアンドセット、そういうコンポジションアークに追加されて、そのスフィアの形状が、その正方形のキューブの形状がスフィアに変換されます。最終的に変換されたバリアンドオブジェット.USDというUSDが、最終的に別のBaseSync.USDというものに合成されていて、そのBase.Sync.USDの中に他のサプレイヤー追加されて、例えば環境証明のサプレイヤー、あとはマテリアル、このスフィアの見た目を定義するマテリアルと追加して、最終的に各サプレイヤーが合成して、レイヤースタックに形成して、最終的に見た目は、こういった環境証明の中に、金属っぽい質感のスフィアの芯が最終的に仕上げられます。このように最終的に、サプレイヤーのような、さっきのように上にいった、Composition Arcの方の性質、意見の方が、最終的に元々のCubeのようなUSDに上掛けしますので、このようにサプレイヤーの方が意見が強くて、次にバリアンドセット、最終的にリファレンスペロードという感じで構成されていくイメージですね。このように見た目は、最終的にCubeの見た目は、金属のスフィアに変換されますけど、変換というか情報が追加されていますけど、それは元々のBaseCube.usdというUSDの中の構造が破壊されていなくて、このようにUSDの編集下では、複数のComposition Arcで組み合わせていて、合成して、そういった非破壊的な構造が形成されます。それではバリアンドセットについて説明させていただきます。バリアンドセットは、そのバリアンドセットを作成する方が、複数の選択肢を、集合をパッケージ化して、他の方がバリアンドセットを利用するときに、その集合から一つを選択して、非破壊的に切り替え、もしくは拡張するComposition Arcとなります。例えば、このような、ジオメトリとマテリアルのパラメーターがありまして、ジオメトリはCubeとSphereになっていて、マテリアルは、メトルとプラスチックという2つのパターンがありまして、このような2つのパラメーターを利用して、4つのバリアンドが作成できます。バリエーションですね。このようなバリエーションは、OpenUSDの中ではバリアンドと呼ばれます。例えば、この4つのバリアンドが作成されていて、まずは左上のType A、Type B、Type C、Type Dという4つの形状と見た目も違う、バリエーションが存在して、このような4つのバリアンドを1つにセットするのが、バリアンドセットになります。まずはBaseが存在して、その中にバリアンドセット機能を利用して、Type A、Type B、Type C、Type Dの間にスイッチして選択して、シーンの上にロードされます。例えば、このバリアンドセットをType Aを選択するときに、Type Aの持っているキューブのジオメトリー、およびメトルのマテリアルがペイロードが、ペイロードもしくはリファレンスされて、この場合はペイロードを使った方がいいかなと思います。次はスフィアのジオメトリー、あとはプラスチックのマテリアルのペイロードがオフされていて、今度はType AではなくType Dにしたい場合は、直接バリアンドセットの中にType AからType Dを選択して、このような見た目を瞬時に変換して、この変換をスイッチして見た目を変える過程の中には、元のデータが残っているので、それも非破壊的な選択の一つですね。このようなバリアンドセットはどういう場所で活用されるといいますと、主に二つのパターンがありまして、まずは既存のアセットデータと、ジオメトリーとマテリアル情報が存在して、それらを利用して新しいアセットを作る、このパターン1ですね。このように今、左の三つがオリジナルのアセットであって、それぞれの三つのジオメトリーと、三つのマテリアルが持っていて、今度は新しいやつを追加します。例えば、左から四番目の青のプラスチックのボックスですけど、そのジオメトリーの情報は、一番左の黒のプラスチックのボックスのジオメトリーの情報を利用して、見た目のマテリアル情報は、左から二番目のものを利用して、このような既存のデータから、マテリアルとジオメトリーを混ぜて利用することで、新しいアセットを作ることができます。次の使い方は、例えばこのようなたくさんのアセットが既に存在していて、これをジオメトリーとマテリアル以外の情報のバリエーションも基づくして、より管理しやすいアセットデータを形成することができます。例えば、これが全て型番が存在するデータとします。見た目とベースメッシュとかマテリアルみたいな、マテリアルとジオメトリー情報のスイッチして利用することも大事なんですけど、構図の中にそのような見た目の情報だけではなく、他のメタデータも大事ですね。例えばサイズとか、どういうようなカラーとか、あと型番とか、それぞれの情報もバリエーション等でスイッチする中に、あらかじめ設定すれば、そのスイッチする過程も、このような情報を交換することもできます。このような、普通のCGのデータであれば、これにはあまり利用されることはすぐないんですけど、例えば、CATデータとか、ビームデータをUSDに利用して、今はまだできていないんですけど、デフォルトで変換できないんですけど、将来にこのデータフォーマットの間の交換する方法が、より研究されていければ、このようなCATデータが持っている情報自体も、直接として読み込んで、一つのプリームに対して、バリアンドセットを使うことで、一つのプリームでたくさんのデータを切り替えて、交換することで、ものすごく管理しやすいデータフォーマットになるかなと思います。最後は、サプレイヤーというコンボジーションアークを紹介させていきます。サプレイヤーは、真の階層的なレイヤー構造で整理、構成するコンボジーションであり、最も重要なコンボジーションであると、僕は思います。右は、オニバースの中のレイヤー構造になっていますね。それをレイヤー構造を左に、もっと分かりやすい図に変換します。このように、factory.ustという、最古に構成されているレイヤーが存在して、次にanimation.ust、prop.ust、layout、environment.ust、例えば、これが一つの会社にたくさんの作業チームが存在して、animationを管理するチームはanimation.ustに作業して、prop.ust、背景とか、ジオメトリーとかを作るチームは、prop.ustに作業して、受け付けは、全体のレイヤーと管理するチームが、レイヤーとBとレイヤーとAで作業して、あとは、最高は、全体の照明環境とかを制御するチームは、involument.ustで作業して、それぞれのチームは、それぞれのサプレイヤーで作業して、お互いの作業に影響するなく、最高の全体的な作業を、ビッター名で確認するのが、factory.ustということができます。もちろん、usd、サプレイヤーの中に、サプレイヤーを追加することができます。このような、例えば、初期の階段で、左のようなanimation.ust、brop.ust、このような、基本的なサプレイヤーが存在して、その後、作業して、中に、新しいサプレイヤーを追加する必要がある場合は、factory.ustから、新しいサプレイヤーを追加することもできるし、そうではなく、その作業をしたレイヤーが、比較的に関連性が強い、サプレイヤーの中に、新しいサプレイヤーを作ることもできます。このサプレイヤーについては、いくつかの機能が、使いやすい機能があります。例えば、mudeですね。mudeは、サプレイヤーを一時的に動かす機能です。このような、左には、見た目が、ガラスで定義されている、スフィアが存在します。それが、ガラスの見た目を定義するサプレイヤーは、change to glass.ustというサプレイヤーですね。このchange to glass.ustのサプレイヤーを、mudeすると、このように、下のchange to metalという、スフィアの表面を、金属的な見た目で、金属的な見た目を定義する、サプレイヤーの情報が、反映されます。このchange to material.ustという、金属っぽい見た目の、マテリオの情報を、今度は、このサプレイヤーを、mudeすると、最初の見た目が、一番最初の、何の、マテリオ情報も、載せていない形になります。もちろん、このようなサプレイヤーは、合成する順番がありまして、基本は、上の、ルートレイヤーに近い、サプレイヤーの意見の方が、優先されて、合成されます。例えば、今、一番上に存在するサプレイヤーは、change to glass.ustという、それが、さっき言ったように、スフィアの見た目を、ガラスで定義する、マテリオが、存在する、レイヤーですね。今度は、このchange to glass.ustを、下に移動して、下のchange to material.ustを、上に移動して、2つのサプレイヤーを、交換すると、これより、簡単にトラックすることで、交換して、見た目は、どういう変化になると、言いますと、最終的には、上の方が、優先されますので、今度は、change to glass.ustという、スフィアの見た目を、ガラスで表現した後に、また、新しいサプレイヤー、change to metalという、情報が反映されて、最終的には、このような、ガラスの見た目から、金属の見た目が、構成されます。このような、サプレイヤーの変種は、お互いに干渉しないため、非破壊的な、当時削減する、ワークフォールが実現する。例えば、実際的に、どういう運用されると、言いますと、基本は、2つ、もっとあるんですけど、今日は、2つの、使い方を紹介させていただきます。まずは、レイアウトの管理ですね。例えば、クライアント様から、ファクトリーの、基本のレイアウトを作成して、今度は、工場に、稼働するロボット、もしくは人間を、いかに効率的に、作業するための、検証する場合は、まずは、このレイアウトを当て、その後に、サプの更新して、様々な、別のレイアウトを追加して、その中に、必要なレイアウトを、最終的に、一番効率のレイアウトを選択して、それを合成する、サプレイヤーと、サプレイヤーの間に、合成することができます。最終的に、実、それが、最効率のレイアウトが見つかったら、それを合成して、最終的に、リアルの建築に、反映することもできますし、そうではなく、また最終の結果に、いかない途中に、例えば、今度は、このレイアウトAで、テストして、今度は、レイアウトBをテストして、ちょっと、一旦前に戻して、別の方法をテストする場合は、このような、サプレイヤーの、さっきの、ミュートキーロン、もしくは、サプレイヤーの、順番の交換して、そうすれば、元に残っている、レイアウトの構造は、そのままで、見た目の、レイアウトの、変化を、することができます。オープンUSDの、コミュニティアウトについては、以上となります。次は、今、池が、オープンUSDを利用して、デジタル知能を構築する中に、実現的に運用している、マテリアルについて、紹介させていただきます。このマテリアルXは、ルカスフリーム、スターウォーズ作ったところ、のアドバンス、デベレプリンググループで、開発され、2016年にオープンソース化された、異なるソフトの間で、マテリアルの共有を実現する、標準規格ですね。一番よくある使い方は、他の別々の、DGsツールでできた、マテリアルを交換するときは、このマテリアルSで、数字で、真ん中の交換形式の場合が、多いかなと思いまして。このマテリアルXの、使っていく中に、いくつかの特徴がありまして、まずは、カードクセイですね。このカードクセイは、どういう意味と言いますと、VSコードなど、テキストエディターだけではなく、マテリアルXグラフ、エディターなどのツールを、ロードベースで、マテリアル構築することができます。このように、これが今映っているのが、とあるマテリアルXの中身の、テキストデータですね。このように、エンジニアが、読みやすいデータになって、アーティストたちも、このようなロードベースで、マテリアルの構築、もしくは、制御することが可能になります。当然、このマテリアルが複雑化になると、このような、パッと見ると、ちょっと理解しづらい構造になりますので、最終的に慣れだったら、テキストの方が読みやすいかなと思います。次は、拡張性ですね。これがオープンスタント、オープンソースであるため、仕様としては、すべてGitHubの上に公開されていますので、公式からGitHub上に、すべての情報が載せていて、そのように、オープンソースなんで、自分の会社であった、バックフォールとか、もしくはパイプラインの開発の中に、自分の会社にあった、カスタマイズをすることが可能となります。最後は、交換性ですね。特定のソフトウェアに依存せず、さまざまなプラットフォームで利用することが、一番の強みかなと思います。従来のワークフォールだと、例えば、左のようなDCSツールで、マテリアルを、物体の表面の成実を構造して、今度は、できたデータを別のプラットフォーム、もしくはオープンス、もしくは、アニュアルエンジン、ユリティなどの、いわゆるゲームエンジンに移行すると、できたPBRテクチャーを作るときは、ある程度PBRテクチャーを通して、物理的に正しい見た目を、新しいプラットフォームに移行しても、ある程度は保持できますけど、DCSツールと、ゲームエンジンなどのものの、シェイターとレンダーラーの、性質とか中の構造が違うので、このように、ある程度見た目は、移行ができますけど、最終的に、ほぼ同じに見た目を再現するのが、やっぱり、その中のパラメータを、再生でする必要がありまして、このように、フルデータを新しいところに利用する、もしくは、別の会社から作ったデータで、最終的にコンパクトするときに、最終的の仕様、こういったガッチリが、仕様がないときには、こういったマテリアルの、再設定する、コーデが出てきます。で、マテリアルXの、採用するワークフォローが、どういう感じとなると、と言いますと、今はまだ、限定的に、オムニバスと、ディーシスツールの間の利用なんですけど、まずは、マテリアルの定義は、まずは、マテリアルXという単体で作っていて、それできたマテリアルは、別々で、ディーシスツールを使うこともできるし、オムニバスに使うこともできるし、このような、ディーシスツールと、オムニバスの間に、データの、行ったり、戻ったりする場合は、全ての、マテリアル情報は、このマテリアルSを使って、コントロールするので、データの困難とか、またデータの見た目が違うみたいな、情報が、ありづらいかなと思います。例えば、これは、オムニバスの、データになっていて、左は、マテリアルXの、オープンPBRという、シェーダーを使っていて、右は、オムニPBRという、ベースシックの、マテリアルを使っていて、このような見た目の差異が、ほぼなくて、つまり、既存のマテリアルの、性質とか、見た目の差異は、マテリアルXも、ある程度できると思います。最後は、各機会社理系が、実現的に、マテリアルSの、運用例を、2つを、説明したいと思います。まずは、このような、マテリアルSを利用して、物体の表面の、既存の、古いデータを、新しいデータに、切り替えるするときの、運用例ですね。このように、マテリアルXを、適用することで、見た目は、物理的な、正しい見た目は、そのままで、傷の表現とか、そういうのも、問題なく、再現することができます。最後は、マテリアルXについて、もう1個の特徴がありまして、従来に、マテリアルの、見た目の、性質を、調整するときは、USDみたいな、ジオメトリから、調整するではなく、基本は、マテリアルの中の、パラメーターを、いじることが多いです。例えば、このような、色を変えたりして、あとは、ラフリスト、メタリックのような、物体の表面の、反射とか、そういうのを、調整するときは、基本マテリアルで、使って、調整するんですけど、これが、マテリアルとか、こういった、DCGの、知識がない方には、ちょっと使いづらいな、と思っていて、今、実装している、マテリアルXは、マテリアルXは、の中にある程度、パラメーターを、設定して、だけど、そのコントロールは、マテリアルからではなく、USDデータの、属性から、それをコントロールすることになります。このように、今は、USDの選択して、中の、属性のパラメーター、カスタマイズした、パラメーターを、調整して、このような、マテリアルではなく、物体から、の中の、パラメーターを、調整するだけでも、マテリアルの表面が、の変化ができます。これを、何を意味すると、言いますと、このように、あらかじめ、別、USDデータ、もしくは、ジオメーターの中の、属性を定義して、それ一つのマテリアルで、複数の表現ができます。これが、開発上に、非常な、エコー的な、開発方法があって、それ、マテリアルの、別々性質で、パターンを追加すると、その後、後の管理も、ものすごく大変であるし、最終的に、この、フリーデータを、新しいデータに移行するときも、大変なので、このような、マテリアルを使って、より管理が、しやすくなって、データの管理も、コンパクトになるかな、と思っていて、もちろん、今の階段で、マテリアルを使用することで、複雑な見た目の表現するのが、やはり、テクシャーを使うことが、必要なんですけど、最終的には、ある程度、見た目の、テクシャーの表現の精度が、低い、そんなに、求められなくて、だけど、見た目の、こういった金属っぽい反射とか、プラスチックっぽい表現とか、そういうのが、必要な場合は、これは、MaterialXを使って、ある程度、テクシャーなしでも、表現できるかな、と思います。最後は、サンゴサイトになります。ご静聴ありがとうございました。ありがとうございました。ご視聴ありがとうございました。チャンネル登録よろしくお願いします。チャンネル登録よろしくお願いします。チャンネル登録よろしくお願いします。チャンネル登録よろしくお願いします。チャンネル登録よろしくお願いします。チャンネル登録よろしくお願いします。チャンネル登録よろしくお願いします。チャンネル登録よろしくお願いします。チャンネル登録よろしくお願いします。チャンネル登録よろしくお願いします。 Thank you. Thank you. Thank you. Thank you.